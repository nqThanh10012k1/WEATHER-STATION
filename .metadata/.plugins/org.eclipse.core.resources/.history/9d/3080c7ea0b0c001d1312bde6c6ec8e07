/*
 * MULTISENSOR_MCU_V1.0.0.c
 *
 *  Created on: Oct 29, 2021
 *      Author: Thanh Nguyen
 */

#include <stm32f401re_rcc.h>
#include <stm32f401re_gpio.h>
#include <stm32f401re_spi.h>
#include <stm32f401re_i2c.h>
#include <stm32f401re_tim.h>
#include <misc.h>
#include <string.h>
#include <stdio.h>
#include <Ucglib.h>

#define TEMP_HUM_SENSOR_ADDR 		0x40
#define TEMP_READ_COMMAND			0xE3
#define HUMI_READ_COMMAND			0xE5

#define I2C1_PORT					GPIOB
#define I2C1_SCL					GPIO_Pin_8
#define I2C1_SDA					GPIO_Pin_9

#define DIRECTION_TRANSMITTER		0
#define DIRECTION_RECEIVER			1

#define SPI1_CS_PORT				GPIOB
#define SPI1_CS_PIN					GPIO_Pin_6
#define SPI1_RST_PORT				GPIOC
#define SPI1_RST_PIN				GPIO_Pin_7
#define SPI1_MOSI_PORT				GPIOA
#define SPI1_MOSI_PIN				GPIO_Pin_7
#define SPI1_SCK_PORT				GPIOA
#define SPI1_SCK_PIN				GPIO_Pin_5
#define SPI1_RS_PORT				GPIOA
#define SPI1_RS_PIN					GPIO_Pin_9
#define SPI1_ENABLE_PORT			GPIOB
#define SPI1_ENABLE_PIN				GPIO_Pin_10
#define SPI1_MODE_PORT				GPIOA
#define SPI1_MODE_PIN				GPIO_Pin_8

static ucg_t ucg;
static uint8_t time_status = 0;
static uint8_t RH_Code_MSByte = 0, RH_Code_LSByte = 0, Temp_Code_MSByte = 0, Temp_Code_LSByte = 0;
static uint16_t RH_Code = 0, Temp_Code = 0;

static void LCD_SetUp();
static void TIM1_Base_Init();
static void I2C1_Init();
static void I2Cx_Send_StartBit(I2C_TypeDef * I2Cx);
static void I2Cx_Transmit_AddressPhase(I2C_TypeDef * I2Cx, uint8_t Address, uint8_t Direction);
static void I2Cx_Transmit_SensorCommand(I2C_TypeDef * I2Cx, uint8_t Command_Code);
static uint8_t I2Cx_Receive_Data_Ack(I2C_TypeDef * I2Cx);
static uint8_t I2Cx_Receive_Data_Nack(I2C_TypeDef * I2Cx);
static void I2Cx_Send_StopBit(I2C_TypeDef * I2Cx);
static void TemHumSensor_readRegister(I2C_TypeDef * I2Cx, uint8_t Sensor_Address, uint8_t Command_Code);
static uint16_t TemHumSensor_getTemperature();
static uint16_t TemHumSensor_getHumidity();
static void processGetValueSensor();

int main()
{
	SystemCoreClockUpdate();
	TimerInit();
	TIM1_Base_Init();
	I2C1_Init();
	LCD_SetUp();

	while (1)
	{
		if (time_status == 1)
		{
			processGetValueSensor();
			status = 0;
		}
		processTimerScheduler();
	}
}

static void LCD_SetUp()
{
	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
	ucg_ClearScreen(&ucg);
	ucg_SetFont(&ucg, ucg_font_ncenR12_hr);
	ucg_SetColor(&ucg, 0, 255, 255, 255);
	ucg_SetColor(&ucg, 1, 0, 0, 0);
	ucg_SetRotate180(&ucg);
}


static void TIM1_Base_Init()
{
	TIM_TimeBaseInitTypeDef		TIMER_Init_Structure;
	NVIC_InitTypeDef			NVIC_Init_Structure;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
	TIMER_Init_Structure.TIM_Prescaler = 8399;
	TIMER_Init_Structure.TIM_CounterMode = TIM_CounterMode_Up;
	TIMER_Init_Structure.TIM_Period = 9999;
	TIMER_Init_Structure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIMER_Init_Structure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(TIM1, &TIMER_Init_Structure);
	TIM_Cmd(TIM1, ENABLE);

	NVIC_Init_Structure.NVIC_IRQChannel = TIM1_UP_TIM10_IRQn;
	NVIC_Init_Structure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init_Structure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_Init_Structure.NVIC_IRQChannelSubPriority = 0;
	NVIC_Init(&NVIC_Init_Structure);
	TIM_ITConfig(TIM1, TIM_IT_Update, ENABLE);
}

void TIM1_UP_TIM10_IRQHandler()
{
	time_status = 1;
	TIM_ClearITPendingBit(TIM1, TIM_IT_Update);
}

static void I2C1_Init()
{
	GPIO_InitTypeDef	GPIO_InitStructure;
	I2C_InitTypeDef		I2C_InitStructure;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStructure.GPIO_OType = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_I2C1);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
	I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStructure.I2C_ClockSpeed = 400000;
	I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStructure.I2C_Ack = ENABLE;
	I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_OwnAddress1 = 0x00;
	I2C_Init(I2C1, &I2C_InitStructure);
	I2C_Cmd(I2C1, ENABLE);
}

static void I2Cx_Send_StartBit(I2C_TypeDef * I2Cx)
{
	while (I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
	I2C_GenerateSTART(I2Cx, ENABLE);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
}

static void I2Cx_Transmit_AddressPhase(I2C_TypeDef * I2Cx, uint8_t Address, uint8_t Direction)
{
	if (Direction == DIRECTION_TRANSMITTER)
	{
		I2C_Send7bitAddress(I2Cx, Address, I2C_Direction_Transmitter);
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	}

	if (Direction == DIRECTION_RECEIVER)
	{
		I2C_Send7bitAddress(I2Cx, Address, I2C_Direction_Receiver);
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	}
}

static void I2Cx_Transmit_SensorCommand(I2C_TypeDef * I2Cx, uint8_t Command_Code)
{
	I2C_SendData(I2Cx, Command_Code);
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
}

static uint8_t I2Cx_Receive_Data_Ack(I2C_TypeDef * I2Cx)
{
	I2C_AcknowledgeConfig(I2Cx, ENABLE);
//	Data = I2C_ReceiveData(I2Cx); 	//Đoạn này em bị sai rồi, khi nào cờ receved ok thì em mới được lấy chứ ko được lấy trước thế này

	//Have to wait receive flag before get data
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));

	return  I2C_ReceiveData(I2Cx);
}

static uint8_t I2Cx_Receive_Data_Nack(I2C_TypeDef * I2Cx)
{
//	uint8_t Data = 0;
	I2C_AcknowledgeConfig(I2Cx, DISABLE);
	//Have to wait receive flag before get data
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED));

	return I2C_ReceiveData(I2Cx);
}

static void I2Cx_Send_StopBit(I2C_TypeDef * I2Cx)
{
	I2C_GenerateSTOP(I2Cx, ENABLE);
}

static void TemHumSensor_readRegister(I2C_TypeDef * I2Cx, uint8_t Sensor_Address, uint8_t Command_Code)
{
	I2Cx_Send_StartBit(I2Cx);
	I2Cx_Transmit_AddressPhase(I2Cx, TEMP_HUM_SENSOR_ADDR << 0x01, DIRECTION_TRANSMITTER);

	// Temperature reading
	if (Command_Code == TEMP_READ_COMMAND)
	{
		I2Cx_Transmit_SensorCommand(I2Cx, TEMP_READ_COMMAND);
		I2Cx_Send_StopBit(I2Cx);
		I2Cx_Send_StartBit(I2Cx);
		I2Cx_Transmit_AddressPhase(I2Cx, TEMP_HUM_SENSOR_ADDR << 0x01, DIRECTION_RECEIVER);
		Temp_Code_MSByte = I2Cx_Receive_Data_Ack(I2Cx);
		Temp_Code_LSByte = I2Cx_Receive_Data_Nack(I2Cx);
	}

	// Humidity reading
	if (Command_Code == HUMI_READ_COMMAND)
	{
		I2Cx_Transmit_SensorCommand(I2Cx, HUMI_READ_COMMAND);
		I2Cx_Send_StopBit(I2Cx);
		I2Cx_Send_StartBit(I2Cx);
		I2Cx_Transmit_AddressPhase(I2Cx, TEMP_HUM_SENSOR_ADDR << 1, DIRECTION_RECEIVER);
		RH_Code_MSByte = I2Cx_Receive_Data_Ack(I2Cx);
		RH_Code_LSByte = I2Cx_Receive_Data_Nack(I2Cx);
	}

	I2Cx_Send_StopBit(I2Cx);
}

static uint16_t TemHumSensor_getTemperature()
{
	uint16_t Temperature;

	// Get Temp_Code
	TemHumSensor_readRegister(I2C1, TEMP_HUM_SENSOR_ADDR, TEMP_READ_COMMAND);
	Temp_Code = (Temp_Code_MSByte << 8) | Temp_Code_LSByte;

	// Measuring Temperature
	Temperature = ((175.72*Temp_Code)/65536)-46.85;	//Temperature (°C) is the measured temperature value in °C

	return Temperature;
}

static uint16_t TemHumSensor_getHumidity()
{
	uint16_t Humidity;

	// get RH_Code
	TemHumSensor_readRegister(I2C1, TEMP_HUM_SENSOR_ADDR, HUMI_READ_COMMAND);
	RH_Code = (RH_Code_MSByte << 8) | RH_Code_LSByte;

	// Measuring Relative Humidity
	Humidity = ((125*RH_Code)/65536)-6;		// Humidity is the measured relative humidity value in %
	if (Humidity < 0)
	{
		Humidity = 0;
	}

	if (Humidity > 100)
	{
		Humidity = 100;
	}

	return Humidity;
}

static void processGetValueSensor()
{
	uint16_t Temperature, Humidity;
	static char Str_Temp[20];
	static char Str_Humi[20];

	Temperature = TemHumSensor_getTemperature();
	sprintf(Str_Temp, "Temp = %d °C", Temperature);

	Humidity = TemHumSensor_getHumidity();
	sprintf(Str_Humi, "Humi = %d %%", Humidity);

	ucg_DrawString(&ucg, 37, 30, 0, "MULTI");
	ucg_DrawString(&ucg, 31, 50, 0, "SENSOR");
	ucg_DrawString(&ucg, 44, 70, 0, "MCU");
	ucg_DrawString(&ucg, 20, 90, 0, Str_Temp);
	ucg_DrawString(&ucg, 20, 110, 0, Str_Humi);
}














